##Dany jest dyskretny sygnał 𝑥∈𝐶38, którego próbki zostały probrane z ciągłego sygnału o ograniczonym paśmie, 
##z szybkością 𝑓𝑝=456 próbek na sekunde. Oblicz 38-punktową dyskretną transformację Fouriera 
##tego sygnału oraz znajdź wartości dyskretnego widma Fouriera tego sygnału dla następujących częstotliwość 𝑓=[−144,216,−24,−204,72,12]
##Jako rozwiązanie podaj sumę faz tych składowych częstotliwościowych.

function rozwiazanie(;

    #wynik 0.7091783015312922, 45pkt amplitude git 0.7091783015313372
    #fp::Int = 1710,
    #x::Vector{ComplexF64} = ComplexF64[0.33 - 0.2im, 0.56 - 0.44im, -0.6 - 0.05im, 0.85 - 0.59im, 0.79 + 0.05im, -0.2 + 0.1im, 0.14 - 0.82im, -0.64 + 1.38im, -0.53 + 0.11im, -1.32 + 0.05im, -0.39 + 0.31im, 0.64 + 0.77im, 0.45 + 1.01im, -0.71 - 0.63im, -0.43 + 0.17im, 2.07 + 1.01im, -1.08 - 0.56im, -0.41 - 0.91im, -1.19 + 0.82im, -1.19 + 0.36im, 0.48 + 0.37im, 0.72 - 0.02im, -0.29 - 0.58im, -0.82 + 0.81im, 0.26 - 0.3im, 0.71 + 0.58im, 0.21 - 0.68im, -0.43 - 0.09im, 0.56 + 0.15im, 0.34 - 0.04im, -0.84 + 0.54im, -0.15 + 0.08im, -0.35 - 1.05im, -0.03 - 1.08im, 0.72 - 0.26im, -1.48 - 0.59im, 0.23 + 0.05im, 0.26 - 0.39im, 0.81 + 0.27im, -0.74 + 1.58im, 0.38 + 0.45im, -0.08 - 0.71im, 0.55 + 2.7im, 0.86 - 0.78im, -0.75 + 0.9im],
    #f::Vector{Int} = [-608, -304, -380, -456, -380],


    #wynik 0.800497080210365, 42pkt DFT amplitude git 0.8004970802103578
    #fp::Int = 462,
    #x::Vector{ComplexF64} = ComplexF64[1.41 - 0.26im, -0.2 - 1.67im, -0.59 - 0.24im, 0.05 - 0.87im, 1.7 - 0.48im, 0.63 - 0.87im, -0.03 + 0.28im, 0.27 + 0.96im, -0.5 - 0.36im, 0.4 + 0.75im, -1.07 + 1.63im, -0.08 - 1.0im, 0.35 - 0.1im, 0.07 - 0.45im, -0.31 + 0.47im, 0.85 + 0.1im, -0.98 - 1.81im, 0.46 - 1.26im, 0.41 - 0.36im, 1.19 + 0.62im, 1.5 - 0.14im, 1.19 + 0.34im, -0.09 + 0.45im, 1.45 - 1.82im, 0.24 + 0.66im, -0.64 - 0.68im, 0.39 + 0.52im, -0.94 - 0.44im, -1.21 - 0.64im, -0.24 - 0.78im, 1.09 + 1.17im, -0.27 - 0.55im, -0.46 + 0.41im, -0.78 - 0.17im, 0.06 + 0.76im, -0.51 + 0.54im, 0.38 + 0.6im, 0.63 + 0.59im, 0.17 - 0.72im, -0.17 + 0.39im, -1.24 + 0.05im, 0.76 + 0.53im],
    #f::Vector{Int} = [165, -99, 0, 66, -11, 11],

    ##wynik: 4.8109857476335245 git 4.810985747633504 4.810985747633499
    #fp::Int = 456,
    #x::Vector{ComplexF64} = ComplexF64[-0.35 + 0.23im, 0.68 - 0.3im, -0.42 + 0.68im, 0.12 + 0.14im, 0.32 - 2.04im, -0.7 + 0.01im, 0.4 + 0.05im, -0.23 - 0.14im, -0.59 + 0.09im, -0.44 - 0.56im, 0.84 + 1.06im, -1.28 - 0.15im, 1.18 + 0.16im, -0.53 - 0.49im, 1.78 - 0.35im, -0.17 - 0.64im, 0.54 - 0.02im, 0.73 - 0.64im, 0.83 + 1.05im, -0.0 + 0.79im, 0.11 + 0.54im, -0.08 + 0.03im, -0.65 + 0.35im, -0.95 - 0.04im, 0.29 + 0.25im, -0.54 + 0.05im, 1.05 - 0.84im, -0.27 + 0.99im, 0.44 + 0.17im, -0.37 - 0.73im, -0.76 - 1.53im, -0.16 + 0.21im, 0.56 + 1.72im, -1.62 - 0.39im, -0.9 - 0.05im, -0.5 - 0.48im, 0.08 - 0.56im, 0.75 - 0.3im],
    #f::Vector{Int} = [-144, 216, -24, -204, 72, 12],


    #wynik 3.357427018971645 zle faza ?
    #fp::Int = 2400,
    #x::Vector{ComplexF64} = ComplexF64[-0.85 + 0.7im, 0.05 + 0.39im, -0.8 + 0.49im, 0.34 + 0.79im, 0.57 + 0.65im, -0.13 - 0.69im, -0.21 + 0.89im, -0.03 - 0.56im, 1.23 - 0.4im, -0.61 - 0.0im, 0.29 + 0.4im, -0.28 - 0.33im, 0.2 - 0.8im, 0.58 - 0.55im, -0.07 - 0.39im, 1.07 + 0.94im, -1.0 + 0.83im, 0.58 + 1.27im, -0.15 - 0.03im, 1.11 + 0.28im, -1.13 + 0.8im, -1.07 - 0.23im, 0.3 - 0.44im, -0.07 - 0.25im, -0.51 - 0.27im, 0.56 - 0.31im, 0.21 - 0.4im, 1.64 + 0.04im, 0.2 - 0.03im, 0.49 + 0.85im, 0.78 - 1.08im, 0.08 - 0.02im, -0.07 - 0.44im, -0.67 + 0.29im, -0.78 - 0.18im, -0.42 - 0.4im, -0.89 + 0.57im, -0.04 + 0.27im, 0.08 + 0.35im, -0.02 - 0.69im, 0.04 + 0.56im, 0.23 - 0.99im, -0.7 - 0.42im, -0.39 + 0.47im, -1.02 + 0.62im, -0.46 + 0.01im, -0.18 - 0.74im, -0.58 + 0.15im, -0.21 + 0.86im, -1.12 - 0.48im],
    #f::Vector{Int} = [432, 1152, 1200, 1200],

    #wynik -1.2084728648110397 zle 
    #fp::Int = 144,
    #x::Vector{ComplexF64} = ComplexF64[0.01 - 1.21im, -0.84 - 0.22im, -0.07 + 0.23im, 0.76 - 0.2im, 1.09 - 0.16im, 0.88 + 0.06im, 1.15 + 0.17im, 0.4 + 0.94im, -0.01 + 0.19im, 0.76 + 0.81im, 0.98 + 0.16im, 0.26 - 0.18im, -0.72 + 0.13im, -1.65 + 0.03im, 1.01 + 0.95im, -0.52 + 0.89im, 0.39 - 0.04im, -0.75 - 0.15im, -0.56 - 0.94im, -0.35 - 0.86im, 1.05 + 0.83im, 0.36 - 0.2im, -1.06 - 0.6im, 0.47 - 0.48im, -0.09 - 0.26im, 0.24 - 0.9im, 0.55 + 0.85im, 0.39 + 0.1im, 1.25 - 0.07im, -1.91 + 0.44im, 0.3 - 0.24im, -0.06 + 0.78im, 0.81 - 0.52im, 0.22 + 0.51im, -0.38 - 0.27im, 0.39 + 0.77im],
    #f::Vector{Int} = [-52, 16, 64, 72],

    #wynik -7.030525613189282 zle
    #fp::Int = 1504,
    #x::Vector{ComplexF64} = ComplexF64[-1.6 - 1.95im, 0.25 + 1.3im, 0.4 - 1.38im, 0.41 - 0.08im, 0.22 + 0.62im, -1.9 + 0.94im, -0.34 - 0.71im, 0.28 - 1.42im, -0.51 + 0.4im, 0.03 - 0.1im, 0.26 - 0.4im, -0.4 + 0.08im, 0.69 - 0.75im, 1.1 + 0.43im, -0.7 - 0.4im, 0.16 + 1.34im, 0.36 - 0.04im, -1.05 + 0.08im, -0.57 - 0.19im, 0.62 - 0.5im, 0.59 + 0.78im, 1.03 - 0.5im, -1.24 - 0.13im, -0.2 + 0.51im, -0.97 + 1.56im, 0.86 - 0.73im, 1.59 - 0.45im, -1.69 - 0.72im, 0.33 + 0.84im, 0.57 - 0.88im, 0.05 + 0.14im, -0.41 + 0.47im],
    #f::Vector{Int} = [-658, -517, -188, 141, 517, 705, 752],

    #wynik amplituda 0.9798602505070213. zle
    #fp::Int = 286, 
    #x::Vector{ComplexF64} = ComplexF64[-0.39 - 0.27im, 0.79 + 0.3im, 0.57 - 0.34im, 0.44 - 1.07im, -0.0 + 0.41im, 0.41 - 0.13im, -1.93 - 1.39im, 1.19 - 0.19im, -0.6 - 1.24im, 0.32 + 0.93im, -0.99 - 0.56im, 0.7 + 0.36im, 0.4 + 1.15im, 0.12 - 0.14im, -1.22 + 1.9im, -0.29 - 0.18im, 0.0 + 0.85im, -0.13 - 0.84im, -0.76 - 0.79im, -0.52 + 1.52im, 0.59 - 0.14im, -0.16 - 0.5im, 0.99 - 0.1im, -1.23 + 0.31im, 0.5 - 0.5im, 0.38 + 0.38im],
    #f::Vector{Int} = [-99, -88, -77, 55, 77, 143],

    #fp::Int = 676,
    #x::Vector{ComplexF64} = ComplexF64[0.29 + 0.4im, 0.53 - 0.22im, 0.64 + 1.46im, 0.3 - 0.81im, 0.79 + 0.23im, -0.1 - 0.45im, -0.22 - 0.24im, 0.54 - 0.81im, 1.55 - 0.6im, -0.11 - 0.37im, 0.61 - 0.23im, 0.09 - 0.61im, -0.89 + 0.4im, 1.55 - 0.27im, 0.54 - 0.84im, 0.68 - 0.81im, -0.24 - 0.03im, 0.44 - 0.75im, 0.2 - 0.11im, -0.72 - 0.31im, 0.67 + 0.23im, 0.85 - 0.96im, -0.12 + 0.21im, -0.04 - 1.08im, -0.47 + 0.3im, 0.67 - 0.14im],
    #f::Vector{Int} = [-312, -286, -52, 26, 338],

    #git
    #fp::Int = 2107,
    #x::Vector{ComplexF64} = ComplexF64[0.03 - 0.87im, -0.1 + 0.16im, -0.94 - 0.25im, 0.49 - 0.22im, -0.13 + 0.32im, -0.15 + 1.23im, 0.75 + 0.38im, -0.54 - 0.28im, -0.74 + 0.21im, -0.27 + 0.0im, 0.39 + 0.07im, -0.23 + 0.21im, -1.42 + 0.33im, -1.27 + 0.57im, 0.26 - 0.02im, -0.55 + 0.34im, -0.32 + 0.44im, 0.59 - 0.94im, 0.19 + 1.26im, 0.19 + 0.0im, 0.47 - 0.15im, -0.25 - 1.06im, -0.61 + 1.06im, -1.67 - 0.5im, 0.39 + 0.11im, -0.74 - 1.3im, -0.32 + 0.62im, 0.89 + 0.52im, -0.63 + 0.19im, 0.4 - 0.38im, -0.71 + 0.13im, -0.09 - 1.39im, -0.84 - 0.97im, 0.39 - 0.06im, -0.37 + 0.93im, 0.48 + 0.71im, 0.16 - 0.88im, 0.3 - 1.11im, -0.54 + 0.64im, -0.28 + 0.05im, 0.18 + 0.97im, -0.66 + 1.33im, -1.09 - 0.36im, -0.11 - 1.3im, 0.56 - 0.04im, 1.3 + 0.64im, -0.44 - 0.65im, 1.22 + 0.58im, -1.16 - 0.08im],
    #f::Vector{Int} = [-516, -430, 645, 731, 774],

    #blad w zadaniu chyba nie ma 1128 tylko -1128 wynik oczekiwany  0.9854768212497352 wynik otrzymany 0.8633534987319528
    fp::Int = 2256,
    x::Vector{ComplexF64} = ComplexF64[-0.57 - 0.95im, 0.2 - 0.04im, 0.16 - 0.49im, 0.62 - 0.16im, 0.62 - 0.27im, -0.18 - 0.09im, -0.13 + 0.75im, -0.31 + 0.62im, -1.0 + 0.22im, 0.11 + 0.47im, -1.34 - 0.35im, 0.46 - 0.64im, 1.23 + 0.9im, -0.1 + 0.55im, 0.94 + 0.27im, -0.96 + 1.25im, -0.47 + 0.04im, 0.02 - 0.71im, 0.1 - 0.8im, 0.38 + 0.96im, 0.79 + 0.79im, 0.73 + 1.58im, 0.09 + 0.08im, -0.74 + 0.24im, 0.52 + 0.66im, -1.28 + 1.3im, -0.03 - 0.3im, 0.37 - 0.35im, -0.6 + 0.68im, -0.55 - 0.43im, -0.67 + 0.82im, -0.46 + 0.11im, 0.36 - 0.06im, -0.84 + 0.8im, -0.39 - 0.53im, 1.3 + 1.29im, -0.45 - 0.17im, 0.17 - 0.58im, -0.08 - 0.51im, -1.66 - 0.59im, 0.25 - 0.46im, -0.27 + 0.07im, 0.79 - 0.27im, -0.26 + 0.04im, -0.67 + 1.14im, -0.61 + 0.84im, -0.75 - 0.45im, -0.33 - 0.69im],
    f::Vector{Int} = [-658, -611, -47, 47, 235, 564, -1128],
)
    N = length(x)
    
    F=[(k < N/2 ? k*(fp/N) : (k-N)*(fp/N)) for k in 0:(N-1)]

    xdft = zeros(ComplexF64, N)
    for k in 0:N-1
        for n in 0:N-1
            xdft[k+1] += x[n+1] *(1/N)* exp(-im * 2 * pi / N)^(k * n)
        end 
    end

    result = 0.0
    
    for i in 1:length(f)
        for j in 1:N
            if  f[i] == F[j]
                result += abs(xdft[j])
                result +=angle(xdft[j])
                println(F[j])
            end
        end
    end

    return result
end

println(rozwiazanie())